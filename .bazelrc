# Aspect recommended Bazel flags when using Aspect's JavaScript rules: https://github.com/aspect-build/rules_js
# Docs for Node.js flags: https://nodejs.org/en/docs/guides/debugging-getting-started/#command-line-options
#
# Support for debugging Node.js tests. Use bazel run with `--config=debug` to turn on the NodeJS
# inspector agent. The node process will break before user code starts and wait for the debugger to
# connect. Pass the --inspect-brk option to all tests which enables the node inspector agent. See
# https://nodejs.org/de/docs/guides/debugging-getting-started/#command-line-options for more
# details.
# Docs: https://nodejs.org/en/docs/guides/debugging-getting-started/#command-line-options


run:debug -- --node_options=--inspect-brk


# Enable runfiles on all platforms. Runfiles are on by default on Linux and MacOS but off on
# Windows.
#
# In general, rules_js and derivate rule sets assume that runfiles are enabled and do not support no
# runfiles case because it does not scale to teach all Node.js tools to use the runfiles manifest.
#
# If you are developing on Windows, you must either run bazel with administrator privileges or
# enable developer mode. If you do not you may hit this error on Windows:
#
#   Bazel needs to create symlinks to build the runfiles tree.
#   Creating symlinks on Windows requires one of the following:
#       1. Bazel is run with administrator privileges.
#       2. The system version is Windows 10 Creators Update (1703) or later
#          and developer mode is enabled.
#
# Docs: https://bazel.build/reference/command-line-reference#flag--enable_runfiles


build --enable_runfiles


# Enable Bazel Modules


common --enable_bzlmod


######## Required Typecheck Performance Selection ########
#
# TypeScript's type-checking exposes a flag `--skipLibCheck`:
# https://www.typescriptlang.org/tsconfig#skipLibCheck
#
# Using this flag saves substantial time during type-checking.
# Rather than doing a full check of all d.ts files, TypeScript will only type-check the code you
# specifically refer to in your app's source code.
# We recommend this for most rules_ts users.
#
# HOWEVER this performance improvement comes at the expense of type-system accuracy.
# For example, two packages could define two copies of the same type in an inconsistent way.
# If you publish a library from your repository, your incorrect types may result in errors for your users.
#
# You must choose exactly one of the following flags:
#
# 1. To choose the faster performance put this in /.bazelrc:
#
#     # passes an argument `--skipLibCheck` to *every* spawn of tsc
#     build --@aspect_rules_ts//ts:skipLibCheck=always
#     fetch --@aspect_rules_ts//ts:skipLibCheck=always
#     query --@aspect_rules_ts//ts:skipLibCheck=always
#
# 2. To choose more correct typechecks, put this in /.bazelrc:
#
#     # honor the setting of `skipLibCheck` in the tsconfig.json file
#     build --@aspect_rules_ts//ts:skipLibCheck=honor_tsconfig
#     fetch --@aspect_rules_ts//ts:skipLibCheck=honor_tsconfig
#     query --@aspect_rules_ts//ts:skipLibCheck=honor_tsconfig
#
#
##########################################################


build --@aspect_rules_ts//ts:skipLibCheck=honor_tsconfig
fetch --@aspect_rules_ts//ts:skipLibCheck=honor_tsconfig
query --@aspect_rules_ts//ts:skipLibCheck=honor_tsconfig
